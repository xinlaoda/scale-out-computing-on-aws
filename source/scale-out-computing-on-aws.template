AWSTemplateFormatVersion: 2010-09-09
Description: (SO0072) - Scale-Out Computing on AWS. Template version 2.6.1
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
            default: Install Location
        Parameters:
          - S3InstallBucket
          - S3InstallFolder

      - Label:
          default: Linux Distribution
        Parameters:
          - BaseOS
          - CustomAMI
          - SchedulerInstanceType
      -
        Label:
          default: Network and Security
        Parameters:
          - VpcCidr
          - ClientIp
          - SSHKeyPair
      - Label:
          default: Default LDAP user
        Parameters:
          - UserName
          - UserPassword

    ParameterLabels:
      VpcCidr:
        default: Create your new VPC
      ClientIp:
        default: What's your IP?
      CustomAMI:
        default: (Optional) Have your own AMI?
      SSHKeyPair:
        default: What's your SSH keypair?
      BaseOS:
        default: Linux Distro
      S3InstallBucket:
        default: S3 bucket with your SOCA installer
      S3InstallFolder:
        default: S3 folder where you uploaded the SOCA files
      SchedulerInstanceType:
        default: Instance type for your scheduler host
      UserName:
        default: Username for your default LDAP user
      UserPassword:
        default: Password for your default LDAP user

Parameters:
  CustomAMI:
    Type: String
    Description: If you use your own AMI, you still have to specify the base os (see above)

  SchedulerInstanceType:
    Default: m5.xlarge
    Type: String
    Description: Choose the type of instance to use for the scheduler

  BaseOS:
    Type: String
    "AllowedValues": [
      "centos7",
      "rhel7",
      "amazonlinux2",
    ]
    "Default": "amazonlinux2"
    "Description": IMPORTANT CENTOS USERS > You MUST subscribe to https://aws.amazon.com/marketplace/pp/B00O7WM7QW first if using CentOS

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Choose the Cidr block (/16 down to /24) you want to use for your VPC (eg 10.0.0.0/16 down to 10.0.0.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-4])'
    ConstraintDescription: Your VPC must use x.x.x.x/16 - x.x.x.x/24 CIDR range

  ClientIp:
    Type: String
    Description: Default IP(s) allowed to directly SSH into the scheduler and access ElasticSearch. 0.0.0.0/0 means ALL INTERNET access. You probably want to change it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/). Make sure to keep it restrictive!
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: ClientIP must be a valid IP or network range of the form x.x.x.x/x. If you want to add everyone (not recommended) use 0.0.0.0/0 otherwise specify your IP/NETMASK (e.g x.x.x/32 or x.x.x.x/24 for subnet range)

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Default SSH pem keys used to SSH into the scheduler

  S3InstallBucket:
    Type: String
    Default: "%%BUCKET_NAME%%"
    Description: Name of your S3 Bucket where you uploaded your install files
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: You must specify the bucket NAME only (no s3:// or https://bucket.s3.amazonaws.com)

  S3InstallFolder:
    Type: String
    Default: "%%SOLUTION_NAME%%/%%VERSION%%"
    Description: Name of the S3 folder where you uploaded SOCA

  UserName:
    Type: String
    MinLength: 3

  UserPassword:
    NoEcho: true
    Type: String
    MinLength: 5
    MaxLength: 50
    AllowedPattern: "^[A-Za-z]+[a-zA-Z0-9@!#+_^{}\\[\\]()]*$"
    Description: "5 characters minimum. Must start with a letter. Special chars accepted: !#@+_^{}[]()"
    ConstraintDescription: "5 characters minimum. Must start with a letter. Special chars accepted: !#@+_^{}[]()"

Mappings:
  Send:
    AnonymousUsage:
      Data: Yes # Must be either Yes or No. Do not use any single or double quotes. Refer to https://docs.aws.amazon.com/solutions/latest/scale-out-computing-on-aws/appendix-d.html

  Info:
    Data:
      ClusterIdPrefix: soca
      Version: 2.6.1
    User:
      centos7: centos
      amazonlinux2: ec2-user
      rhel7: ec2-user



  RegionMap:
    af-south-1:
      amazonlinux2: ami-0c6e605ab94c1af57
      centos7: ami-0b761332115c38669
    ap-east-1:
      amazonlinux2: ami-d60844a7
      centos7: ami-09611bd6fa5dd0e3d
      rhel7: ami-1a453e6b
    ap-northeast-1:
      amazonlinux2: ami-01748a72bed07727c
      centos7: ami-0ddea5e0f69c193a4
      rhel7: ami-0e3e6ca71a19ccf06
    ap-northeast-2:
      amazonlinux2: ami-0094965d55b3bb1ff
      centos7: ami-0e4214f08b51e23cc
      rhel7: ami-0f84aff229263c1fc
    ap-south-1:
      amazonlinux2: ami-04b1ddd35fd71475a
      centos7: ami-0ffc7af9c06de0077
      rhel7: ami-0b105c57e305d9064
    ap-southeast-1:
      amazonlinux2: ami-00b8d9cb8a7161e41
      centos7: ami-0adfdaea54d40922b
      rhel7: ami-031290b4bd9eaa715
    ap-southeast-2:
      amazonlinux2: ami-06ce513624b435a22
      centos7: ami-03d56f451ca110e99
      rhel7: ami-06d2821bfc76dcda3
    ca-central-1:
      amazonlinux2: ami-0c3e7f50c89a372ae
      centos7: ami-0a7c5b189b6460115
      rhel7: ami-0a43efe505004e592
    eu-central-1:
      amazonlinux2: ami-03c3a7e4263fd998c
      centos7: ami-08b6d44b4f6f7b279
      rhel7: ami-0fc86555914f6a9f2
    eu-north-1:
      amazonlinux2: ami-02cb52d7ba9887a93
      centos7: ami-0358414bac2039369
      rhel7: ami-8833bbf6
    eu-south-1:
      amazonlinux2: ami-080807541452b0410
      centos7: ami-0fe3899b62205176a
      rhel7: ami-004f2ac6013e4fcfb
    eu-west-1:
      amazonlinux2: ami-01720b5f421cf0179
      centos7: ami-04f5641b0d178a27a
      rhel7: ami-04c89a19fea29f1f0
    eu-west-2:
      amazonlinux2: ami-0e80a462ede03e653
      centos7: ami-0b22fcaf3564fb0c9
      rhel7: ami-06fe0c124aedcef5f
    eu-west-3:
      amazonlinux2: ami-00798d7180f25aac2
      centos7: ami-072ec828dae86abe5
      rhel7: ami-08295de7534115935
    me-south-1:
      amazonlinux2: ami-0032aa87bb75498ea
      centos7: ami-0ac17dcdd6f6f4eb6
      rhel7: ami-0e845cba4071a4a1a
    sa-east-1:
      amazonlinux2: ami-022082b7f1da62478
      centos7: ami-02334c45dd95ca1fc
      rhel7: ami-06efd558d6a5fb959
    us-east-1:
      amazonlinux2: ami-0be2609ba883822ec
      centos7: ami-00e87074e52e6c9f9
      rhel7: ami-08a7d2bfef687328f
    us-east-2:
      amazonlinux2: ami-0a0ad6b70e61be944
      centos7: ami-00f8e2c955f7ffa9b
      rhel7: ami-0e166e72fda655c63
    us-west-1:
      amazonlinux2: ami-03130878b60947df3
      centos7: ami-08d2d8b00f270d03b
      rhel7: ami-056efb42b219f9abb
    us-west-2:
      amazonlinux2: ami-0a36eb8fadc976275
      centos7: ami-0686851c4e7b1a8e1
      rhel7: ami-02deb4589e0f0d95e
    cn-northwest-1:
      amazonlinux2: ami-010f676abe7d44960
      centos7: ami-083672bfc3c2e9164

Conditions:
  UseCustomAMI: !Not [!Equals [!Ref CustomAMI, ""]]

Resources:
  # ============ BEGIN PRE-REQUISITE ============ #
  CheckPreRequisiteRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"

    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PreRequisite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource: "*"
                Condition:
                  "StringEqualsIfExists":
                      "aws:PrincipalAccount": !Sub "${AWS::AccountId}"


  CheckPreRequisiteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Check Pre-Requisite for SOCA
      FunctionName: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName", "PreRequisitesCheck"] ]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt CheckPreRequisiteRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import re
          import boto3
          '''
          Check SOCA Pre-Requisite
          '''

          def lambda_handler(event, context):
            region = event['ResourceProperties']['Region']
            stack_name = event['ResourceProperties']['StackName']
            clusterIdPrefix = event['ResourceProperties']['ClusterIdPrefix']
            blocked_regions = ['us-west-1'] # only 2 AZ

            if region in blocked_regions:
              error_message = 'Sorry, this region is not yet supported by SOCA'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            # Strip clusterIdPrefix (soca) from front of Stackname to prevent things like "soca-soca-"
            stack_name = re.sub(r'^' + clusterIdPrefix + r'[-]?', r'', stack_name, flags=re.IGNORECASE)

            if stack_name.__len__() > 20:
              error_message = 'Please use a stack name smaller than 20 characters'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            clusterId = clusterIdPrefix + '-' + stack_name

            # Calculate PublicSubnetMaskPrefixBits and PrivateSubnetMaskPrefixBits
            # Example: VpcCidr: 10.0.0.0/17 --> VPCCidrPrefixBits = 17
            # PublicSubnetMaskPrefixBits = 4
            # PrivateSubnetMaskPrefixBits = 2
            # PublicSubnetMaskBits = 32 - 17 - 4 = 11 (PublicSubnetMask would be 32 - 11 = /21)
            # Added new condition to reduce size of PublicSubnetMask to a maximum of /26
            # PrivateSubnetMaskBits = 32 - 17 - 2 = 13 (PrivateSubnetMask would be 32 - 13 = /19)

            VPCCidrPrefixBits = event['ResourceProperties']['VPCCidrPrefixBits']
            PublicSubnetMaskPrefixBits = event['ResourceProperties']['PublicSubnetMaskPrefixBits']
            PrivateSubnetMaskPrefixBits = event['ResourceProperties']['PrivateSubnetMaskPrefixBits']
            PublicSubnetMaskBits = 32 - int(VPCCidrPrefixBits) - int(PublicSubnetMaskPrefixBits)
            if PublicSubnetMaskBits > 6: PublicSubnetMaskBits = 6
            PrivateSubnetMaskBits = 32 - int(VPCCidrPrefixBits) - int(PrivateSubnetMaskPrefixBits)
            
            iam_client = boto3.client('iam')
            es_roles = iam_client.list_roles(PathPrefix='/aws-service-role/es.amazonaws.com')
            if len(es_roles['Roles']) == 0:
                CreateESServiceRole = "True"
            else:
                CreateESServiceRole = "False"

            responseData = {'ClusterId': clusterId.lower(),
                            'PublicSubnetMaskBits': PublicSubnetMaskBits,
                            'PrivateSubnetMaskBits': PrivateSubnetMaskBits,
                            'CreateESServiceRole': CreateESServiceRole}

            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'Pre-Requisites OK')

  CheckSOCAPreRequisite:
    DependsOn: CheckPreRequisiteLambda
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CheckPreRequisiteLambda.Arn
      Region: !Ref "AWS::Region"
      StackName: !Ref "AWS::StackName"
      ClusterIdPrefix: !FindInMap [ Info, Data, ClusterIdPrefix ]
      VPCCidrPrefixBits: !Select [1, !Split [ "/", !Ref VpcCidr ]]
      PublicSubnetMaskPrefixBits: 4
      PrivateSubnetMaskPrefixBits: 2

  # ============ END PRE-REQUISITE ============ #

  Network:
    DependsOn: CheckSOCAPreRequisite
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcCidr: !Ref VpcCidr
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        PublicSubnetMaskBits: !GetAtt CheckSOCAPreRequisite.PublicSubnetMaskBits
        PrivateSubnetMaskBits: !GetAtt CheckSOCAPreRequisite.PrivateSubnetMaskBits
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Network.template"] ]

  Security:
    DependsOn: Network
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !GetAtt Network.Outputs.VpcId
        ClientIp: !Ref ClientIp
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
        SchedulerPublicIP: !GetAtt Network.Outputs.SchedulerPublicIP
        EIPNat: !GetAtt Network.Outputs.EIPNat
        CreateESServiceRole: !GetAtt CheckSOCAPreRequisite.CreateESServiceRole

      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Security.template"] ]
      TimeoutInMinutes: 30

  Storage:
    Type: AWS::CloudFormation::Stack
    DependsOn: Security
    Properties:
      Parameters:
        VpcId: !GetAtt Network.Outputs.VpcId
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Storage.template"] ]
      TimeoutInMinutes: 30

  Scheduler:
    DependsOn: Storage
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SSHKeyPair: !Ref SSHKeyPair
        SchedulerInstanceType: !Ref SchedulerInstanceType
        SubnetId: !GetAtt Network.Outputs.PublicSubnet1
        SecurityGroupId: !GetAtt Security.Outputs.SchedulerSecurityGroup
        SchedulerIAMInstanceProfile: !GetAtt Security.Outputs.SchedulerIAMInstanceProfile
        S3InstallFolder: !Ref S3InstallFolder
        S3Bucket: !Ref S3InstallBucket
        Version: !FindInMap [ Info, Data, Version ]
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        EFSDataDns: !GetAtt Storage.Outputs.EFSDataDns
        EFSAppsDns: !GetAtt Storage.Outputs.EFSAppsDns
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        BaseOS: !Ref BaseOS
        UserName: !Ref UserName
        UserPassword: !Ref UserPassword
        SchedulerPublicIP: !GetAtt Network.Outputs.SchedulerPublicIP
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Scheduler.template"] ]
      TimeoutInMinutes: 60

  Analytics:
    DependsOn: Security
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        VpcId: !GetAtt Network.Outputs.VpcId
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId

      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Analytics.template"] ]
      TimeoutInMinutes: 30

  Viewer:
    DependsOn:
      - Scheduler
      - Analytics
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        PublicSubnet1: !GetAtt Network.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt Network.Outputs.PublicSubnet2
        PublicSubnet3: !GetAtt Network.Outputs.PublicSubnet3
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        VpcId: !GetAtt Network.Outputs.VpcId
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        LambdaACMIAMRoleArn: !GetAtt Security.Outputs.LambdaACMIAMRoleArn
        ESDomainIPAddresses: !GetAtt Analytics.Outputs.ESDomainIPAddresses
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Viewer.template"] ]
      TimeoutInMinutes: 30


  Configuration:
    DependsOn: Viewer
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerPrivateDnsName: !GetAtt Scheduler.Outputs.SchedulerPrivateDnsName
        SchedulerPrivateIP: !GetAtt Scheduler.Outputs.SchedulerPrivateIP
        SchedulerPublicIP: !GetAtt Network.Outputs.SchedulerPublicIP
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        ComputeNodeIAMRoleArn: !GetAtt Security.Outputs.ComputeNodeIAMRoleArn
        ComputeNodeIAMRole: !GetAtt Security.Outputs.ComputeNodeIAMRole
        ComputeNodeInstanceProfileArn: !GetAtt Security.Outputs.ComputeNodeInstanceProfileArn
        SchedulerIAMRoleArn: !GetAtt Security.Outputs.SchedulerIAMRoleArn
        SpotFleetIAMRoleArn: !GetAtt Security.Outputs.SpotFleetIAMRoleArn
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        VpcId: !GetAtt Network.Outputs.VpcId
        PublicSubnet1: !GetAtt Network.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt Network.Outputs.PublicSubnet2
        PublicSubnet3: !GetAtt Network.Outputs.PublicSubnet3
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        EFSDataDns: !GetAtt Storage.Outputs.EFSDataDns
        EFSAppsDns: !GetAtt Storage.Outputs.EFSAppsDns
        S3InstallFolder: !Ref S3InstallFolder
        Version: !FindInMap [ Info, Data, Version ]
        S3Bucket: !Ref S3InstallBucket
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        SSHKeyPair: !Ref SSHKeyPair
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        ESDomainEndpoint: !GetAtt Analytics.Outputs.ESDomainEndpoint
        LoadBalancerDNSName: !GetAtt Viewer.Outputs.LoadBalancerDNSName
        LoadBalancerArn: !GetAtt Viewer.Outputs.LoadBalancerArn
        BaseOS: !Ref BaseOS
        SolutionMetricsRoleArn: !GetAtt Security.Outputs.SolutionMetricsRoleArn
        DefaultMetricCollection: !FindInMap [ Send, AnonymousUsage, Data ]
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::Region}.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Configuration.template"] ]
      TimeoutInMinutes: 60

Outputs:
  SchedulerPublicIP:
    Value: !GetAtt Network.Outputs.SchedulerPublicIP
  LDAPAdminUsername:
    Value: admin
  LDAPAdminPassword:
    Value: /root/OpenLdapAdminPassword.txt
  AnalyticsDashboard:
    Value: !Join [ "", [ "https://", !GetAtt Viewer.Outputs.LoadBalancerDNSName, "/_plugin/kibana/"]]
  ConnectionString:
    Value: !Join [ "", [ "ssh -i ", !Ref SSHKeyPair, ".pem ", !FindInMap [ Info, User, !Ref BaseOS ], "@", !GetAtt Network.Outputs.SchedulerPublicIP]]
  WebUserInterface:
    Value: !Join [ "", [ "https://", !GetAtt Viewer.Outputs.LoadBalancerDNSName]]
  BaseOS:
    Value: !Ref BaseOS
  BaseAMI:
    Value: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
  Version:
    Value: !FindInMap [ Info, Data, Version ]
